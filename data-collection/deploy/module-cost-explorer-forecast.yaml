AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves AWS Cost Explorer Forecast information from across an organization
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket that exists or needs to be created to hold forecast information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold forecast information
  ManagementRoleName:
    Type: String
    Description: The name of the IAM role that will be deployed in the management account which can retrieve AWS Organization data. KEEP THE SAME AS WHAT IS DEPLOYED INTO MANAGEMENT ACCOUNT
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: cost-explorer-forecast
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(1 day)"
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the Account Collector Lambda
  CodeBucket:
    Type: String
    Description: Source code bucket
  StepFunctionTemplate:
    Type: String
    Description: S3 key to the JSON template for the StepFunction
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution
  LambdaManageGlueTableARN:
    Type: String
    Description: ARN of a Lambda for Managing GlueTable
  DataBucketsKmsKeysArns:
    Type: String
    Description: "ARNs of KMS Keys for data buckets and/or Glue Catalog. Comma separated list, no spaces. Keep empty if data Buckets and Glue Catalog are not Encrypted with KMS. You can also set it to '*' to grant decrypt permission for all the keys."
    Default: ""
  ForecastTimeperiod:
    Type: Number
    Description: "Number of days for which the forecast is requested (1-364)"
    Default: 90
    MinValue: 1
    MaxValue: 364
  ForecastGranularity:
    Type: String
    Description: "Granularity of the forecast (DAILY, MONTHLY, YEARLY)"
    Default: "MONTHLY"
    AllowedValues:
      - "DAILY"
      - "MONTHLY"
      - "YEARLY"
  ForecastPredictionIntervalLevel:
    Type: Number
    Description: "The confidence level for the prediction intervals (1-99)"
    Default: 85
    MinValue: 1
    MaxValue: 99
  ForecastMetric:
    Type: String
    Description: "Which metric Cost Explorer uses to create your forecast (BLENDED_COST, UNBLENDED_COST, AMORTIZED_COST, NET_UNBLENDED_COST, NET_AMORTIZED_COST)"
    Default: "BLENDED_COST"
    AllowedValues:
      - "BLENDED_COST"
      - "UNBLENDED_COST"
      - "AMORTIZED_COST"
      - "NET_UNBLENDED_COST"
      - "NET_AMORTIZED_COST"

Conditions:
  NeedDataBucketsKms: !Not [ !Equals [ !Ref DataBucketsKmsKeysArns, "" ] ]

Outputs:
  StepFunctionARN:
    Description: ARN for the module's Step Function
    Value: !GetAtt ModuleStepFunction.Arn

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /
      Policies:
        - PolicyName: !Sub "${CFDataName}-ManagementAccount-LambdaRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${ManagementRoleName}" # Need to assume a Read role in management accounts
        - !If
          - NeedDataBucketsKms
          - PolicyName: "KMS"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "kms:GenerateDataKey"
                  Resource: !Split [ ',', !Ref DataBucketsKmsKeysArns ]
          - !Ref AWS::NoValue
        - PolicyName: "S3-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                Resource:
                  - !Sub "${DestinationBucketARN}"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: !Sub "Lambda function to retrieve ${CFDataName}"
      Runtime: python3.12
      Architectures: [x86_64]
      Code:
        ZipFile: |
          """ Collect Cost Explorer Forecast data and upload to S3
          """
          import os
          import json
          import logging
          from datetime import date, datetime, timedelta

          import boto3

          logger = logging.getLogger(__name__)
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          BUCKET = os.environ['BUCKET_NAME']
          ROLE = os.environ['ROLENAME']
          PREFIX = os.environ['PREFIX']
          TIMEPERIOD = int(os.environ['FORECAST_TIMEPERIOD'])
          GRANULARITY = os.environ['FORECAST_GRANULARITY']
          PREDICTION_INTERVAL_LEVEL = int(os.environ['FORECAST_PREDICTION_INTERVAL_LEVEL'])
          METRIC = os.environ['FORECAST_METRIC']

          def store_data_to_s3(data, payer_id):
              if not data:
                  logger.info("No data")
                  return
              key = date.today().strftime(f"{PREFIX}/{PREFIX}-data/payer_id={payer_id}/year=%Y/month=%m/day=%d/%Y-%m-%d.json")
              boto3.client('s3').put_object(
                  Bucket=BUCKET,
                  Key=key,
                  Body=json.dumps(data, default=str)
              )
              logger.info(f'File upload successful to s3://{BUCKET}/{key}')

          def get_cost_forecast(ce_client):
              """Get the cost forecast from AWS Cost Explorer"""
              today = date.today()
              start_date = today.isoformat()
              end_date = (today + timedelta(days=TIMEPERIOD)).isoformat()
              
              logger.info(f"Getting cost forecast from {start_date} to {end_date} with granularity {GRANULARITY}")
              
              response = ce_client.get_cost_forecast(
                  TimePeriod={
                      'Start': start_date,
                      'End': end_date
                  },
                  Metric=METRIC,
                  Granularity=GRANULARITY,
                  PredictionIntervalLevel=PREDICTION_INTERVAL_LEVEL
              )
              
              return {
                  "ForecastDate": today.isoformat(),
                  "StartDate": start_date,
                  "EndDate": end_date,
                  "Granularity": GRANULARITY,
                  "Metric": METRIC,
                  "PredictionIntervalLevel": PREDICTION_INTERVAL_LEVEL,
                  "Total": response.get('Total', {}),
                  "ForecastResultsByTime": response.get('ForecastResultsByTime', [])
              }

          def process_one_management_acc(management_account_id):
              logger.debug('assuming role')
              region = boto3.session.Session().region_name
              partition = boto3.session.Session().get_partition_for_region(region_name=region)
              cred = boto3.client('sts').assume_role(
                  RoleArn=f"arn:{partition}:iam::{management_account_id}:role/{ROLE}",
                  RoleSessionName="data_collection"
              )['Credentials']
              cost_explorer = boto3.client(
                  "ce",
                  "us-east-1", #Must be "us-east-1"
                  aws_access_key_id=cred['AccessKeyId'],
                  aws_secret_access_key=cred['SecretAccessKey'],
                  aws_session_token=cred['SessionToken'],
              )
              logger.debug('Pulling forecast info')
              
              forecast_data = get_cost_forecast(cost_explorer)
              store_data_to_s3(forecast_data, management_account_id)

          def lambda_handler(event, context):
              logger.info(f"Event data {json.dumps(event)}")
              if 'account' not in event:
                  raise ValueError(
                      "Please do not trigger this Lambda manually."
                      "Find the corresponding state machine in Step Functions and Trigger from there."
                  )
              account = json.loads(event["account"])
              try:
                  process_one_management_acc(account["account_id"])
              except Exception as exc:
                  logging.warning(f"{account['account_id']} :  {exc}")

              return "Successful"
      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 600
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DestinationBucket
          PREFIX: !Ref CFDataName
          ROLENAME: !Ref ManagementRoleName
          FORECAST_TIMEPERIOD: !Ref ForecastTimeperiod
          FORECAST_GRANULARITY: !Ref ForecastGranularity
          FORECAST_PREDICTION_INTERVAL_LEVEL: !Ref ForecastPredictionIntervalLevel
          FORECAST_METRIC: !Ref ForecastMetric
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 #  Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 60

  ModuleGlueTable:
    Type: Custom::ManageGlueTable
    Properties:
      ServiceToken: !Ref LambdaManageGlueTableARN
      TableInput:
        Name: cost_explorer_forecast_data
        TableType: EXTERNAL_TABLE
        Parameters:
          classification: json
          compressionType: none
        PartitionKeys:
          - Name: payer_id
            Type: string
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
        StorageDescriptor:
          Columns:
            - Name: forecastdate
              Type: string
            - Name: startdate
              Type: string
            - Name: enddate
              Type: string
            - Name: granularity
              Type: string
            - Name: metric
              Type: string
            - Name: predictionintervallevel
              Type: int
            - Name: total
              Type: struct<amount:string,unit:string>
            - Name: forecastresultsbytime
              Type: array<struct<
                meanvalue:string,
                predictionintervallowerbound:string,
                predictionintervalupperbound:string,
                timeperiod:struct<start:string,end:string>>>
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-data/"
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              paths: forecastdate,startdate,enddate,granularity,metric,predictionintervallevel,total,forecastresultsbytime
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub "${ResourcePrefix}${CFDataName}-Crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-data/"
      Configuration: |
        {
          "Version": 1.0,
          "Grouping": {
            "TableGroupingPolicy": "CombineCompatibleSchemas"
          },
          "CrawlerOutput": {
            "Tables": {
              "TableThreshold": 1
            }
          }
        }

  ModuleStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${ResourcePrefix}${CFDataName}-StateMachine"
      StateMachineType: STANDARD
      RoleArn: !Ref StepFunctionExecutionRoleARN
      DefinitionS3Location:
        Bucket: !Ref CodeBucket
        Key: !Ref StepFunctionTemplate
      DefinitionSubstitutions:
        AccountCollectorLambdaARN: !Ref AccountCollectorLambdaARN
        ModuleLambdaARN: !GetAtt LambdaFunction.Arn
        Crawlers: !Sub '["${ResourcePrefix}${CFDataName}-Crawler"]'
        CollectionType: "Payers"
        Params: ""
        Module: !Ref CFDataName
        DeployRegion: !Ref AWS::Region
        Account: !Ref AWS::AccountId
        Prefix: !Ref ResourcePrefix

  ModuleRefreshSchedule:
    Type: "AWS::Scheduler::Schedule"
    Properties:
      Description: !Sub "Scheduler for the ODC ${CFDataName} module"
      Name: !Sub "${ResourcePrefix}${CFDataName}-RefreshSchedule"
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      FlexibleTimeWindow:
        MaximumWindowInMinutes: 30
        Mode: "FLEXIBLE"
      Target:
        Arn: !GetAtt ModuleStepFunction.Arn
        RoleArn: !Ref SchedulerExecutionRoleARN

  AnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName

  AthenaQueryCostForecastSummary:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the cost forecast data
      Name: cost-explorer-forecast-summary
      QueryString: !Sub |
        WITH latest_forecast AS (
          SELECT
            payer_id,
            MAX(date_parse(concat(year, month, day), '%Y%m%d')) as forecast_date
          FROM
            ${DatabaseName}.cost_explorer_forecast_data
          GROUP BY
            payer_id
        )
        
        SELECT
          f.payer_id,
          f.forecastdate,
          f.startdate,
          f.enddate,
          f.granularity,
          f.metric,
          f.predictionintervallevel,
          f.total.amount as total_amount,
          f.total.unit as currency_unit
        FROM
          ${DatabaseName}.cost_explorer_forecast_data f
        JOIN
          latest_forecast l ON f.payer_id = l.payer_id
          AND date_parse(concat(f.year, f.month, f.day), '%Y%m%d') = l.forecast_date
        ORDER BY
          f.payer_id

  AthenaQueryCostForecastDetails:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a detailed view of the cost forecast by time period
      Name: cost-explorer-forecast-details
      QueryString: !Sub |
        WITH latest_forecast AS (
          SELECT
            payer_id,
            MAX(date_parse(concat(year, month, day), '%Y%m%d')) as forecast_date
          FROM
            ${DatabaseName}.cost_explorer_forecast_data
          GROUP BY
            payer_id
        )
        
        SELECT
          f.payer_id,
          f.forecastdate,
          result.timeperiod.start as period_start,
          result.timeperiod.end as period_end,
          CAST(result.meanvalue AS decimal(20,2)) as mean_value,
          CAST(result.predictionintervallowerbound AS decimal(20,2)) as lower_bound,
          CAST(result.predictionintervalupperbound AS decimal(20,2)) as upper_bound,
          f.total.unit as currency_unit
        FROM
          ${DatabaseName}.cost_explorer_forecast_data f
          CROSS JOIN UNNEST(f.forecastresultsbytime) as t(result)
        JOIN
          latest_forecast l ON f.payer_id = l.payer_id
          AND date_parse(concat(f.year, f.month, f.day), '%Y%m%d') = l.forecast_date
        ORDER BY
          f.payer_id, result.timeperiod.start
